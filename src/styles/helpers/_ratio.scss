/**
* === RATIO ===
*/

//
// @link
// https://github.com/inuitcss/inuitcss/blob/19d0c7e/objects/_objects.ratio.scss
//

//
// A list of aspect ratios that get generated as modifier classes.
$aspect-ratios: (
	(4:3),
	(16:9),
	(2:1),
	(21:9),
	(19:10),
) !default;

/* stylelint-disable */

//
// Generate a series of ratio classes to be used like so:
//
// @example
//   <div class="o-ratio u-16:9">
@each $ratio in $aspect-ratios {
	@each $antecedent, $consequent in $ratio {
		@if (type-of($antecedent) != number) {
			@error "`#{$antecedent}` needs to be a number."
		}

		@if (type-of($consequent) != number) {
			@error "`#{$consequent}` needs to be a number."
		}

		.-ratio#{$antecedent}\:#{$consequent}::before {
			padding-bottom: ($consequent/$antecedent) * 100%;
		}
	}
}

/* stylelint-enable */

//
// Create ratio-bound content blocks, to keep media (e.g. images, videos) in
// their correct aspect ratios.
//
// http://alistapart.com/article/creating-intrinsic-ratios-for-video
//
// 1. Default cropping is a 1:1 ratio (i.e. a perfect square).
//

// Component class
// =============================================================================
.-ratio {
	position: relative;
	display: block;
	overflow: hidden;

	&::before {
		content: "";
		display: block;
		padding-bottom: 100%; /* [1] */
		width: 100%;
	}
}

// Content
// =============================================================================
.-ratio__content,
.-ratio > img,
.-ratio > picture,
.-ratio > iframe,
.-ratio > embed,
.-ratio > object {
	position: absolute;
	top: 0;
	bottom: 0;
	left: 0;
	width: 100%;
	height: 100%;
}
