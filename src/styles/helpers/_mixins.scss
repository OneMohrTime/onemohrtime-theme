/* ==========================================================================
	Mixins
========================================================================== */

/**
 * === STRUCTURE ===
 */

@mixin block-width() {
	margin-top: 0;
	margin-left: $gutter;
	margin-right: $gutter;
	margin-bottom: $gutter-lg;

	@include media(">=screen768") {
		margin-left: $gutter-lg;
		margin-right: $gutter-lg;
	}

	@include media(">=screen1024") {
		margin-left: $gutter-xl;
		margin-right: $gutter-xl;
	}

	@include media(">=screen1440") {
		margin-left: $gutter-xxl;
		margin-right: $gutter-xxl;
	}
}

@mixin content-width() {
	@include media(">=screen840") {
		// cap line lengths
		& > p,
		& > ul,
		& > ol {
			max-width: $copy-width;
		}
	}
}

@mixin padding() {
	padding-left: $gutter;
	padding-right: $gutter;

	@include media(">=screen768") {
		padding-left: $gutter-lg;
		padding-right: $gutter-lg;
	}

	@include media(">=screen1024") {
		padding-left: $gutter-xl;
		padding-right: $gutter-xl;
	}

	@include media(">=screen1440") {
		padding-left: $gutter-xxl;
		padding-right: $gutter-xxl;
	}
}

/**
 * === ACCESSIBILITY ===
 */

@mixin visually-hidden($focus: null) {
	position: absolute !important;
	border: 0;
	width: 1px;
	height: 1px;
	margin: -1px;
	padding: 0;
	clip: rect(1px, 1px, 1px, 1px);
	clip-path: inset(50%);
	overflow: hidden;
	word-wrap: normal !important; // Many screen reader and browser combinations announce broken words as they would appear visually.

	$focus: null !default;
	@if $focus == null {
		// nothing, continue on
	} @else {
		&:focus {
			top: 5px;
			left: 5px;
			display: block;
			background-color: $yellow--light;
			color: #444;
			font-size: 1em;
			text-decoration: none;
			line-height: normal;
			width: auto;
			height: auto;
			padding: $gutter-sm $gutter;
			clip: auto !important;
			clip-path: none;
			z-index: 100000; // Above WP toolbar.
		}
	}
}

@mixin hide-visually($toggle: "hide") {
	@if not index("hide" "unhide", $toggle) {
		@error "`#{$toggle}` is not a valid value for the `$toggle` argument in " +
			"the `hide-visually` mixin. Must be either `hide` or `unhide`.";
	} @else if $toggle == "hide" {
		border: 0;
		clip: rect(1px, 1px, 1px, 1px);
		clip-path: inset(100%);
		height: 1px;
		overflow: hidden;
		padding: 0;
		position: absolute;
		white-space: nowrap;
		width: 1px;
	} @else if $toggle == "unhide" {
		clip: auto;
		clip-path: none;
		height: auto;
		overflow: visible;
		position: static;
		white-space: inherit;
		width: auto;
	}
	// @example scss
	//   .element {
	//     @include hide-visually;
	//
	//     &:active,
	//     &:focus {
	//       @include hide-visually("unhide");
	//     }
	//   }
}

/**
 * === TOOLS ===
 */

@mixin aspect-ratio($width, $height) {
	position: relative;

	&::before {
		content: "";
		display: block;
		width: 100%;
		padding-top: ($height / $width) * 100%;
	}

	& > * {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
	}
}

@mixin text-shadow() {
	text-shadow: 2px 2px 4px fade-out($black, 0.95);
}

@mixin box-shadow($inset: null) {
	@if $inset == "inset" {
		box-shadow: inset 1px 2px 10px fade-out($black, 0.95);
	} @else {
		box-shadow: 1px 2px 10px fade-out($black, 0.95);
	}
}

/**
 * === HEADER STYLES ===
 */

@mixin white-shadow() {
	color: shade($white, 0.05);
	text-shadow: 0 13.36px 8.896px $white--darkest, 0 -2px 1px $white;
}

@mixin deep-shadow() {
	text-shadow: 1px -1px 0 shade($white, 50%),
				-1px 2px 1px shade($white, 48%),
				-2px 4px 1px shade($white, 46%),
				-3px 6px 1px shade($white, 44%),
				-4px 8px 1px shade($white, 42%),
				-5px 10px 1px shade($white, 40%),
				-6px 12px 1px shade($white, 38%),
				-7px 14px 1px shade($white, 36%),
				-8px 16px 1px shade($white, 34%),
				-9px 18px 1px shade($white, 32%),
				-10px 20px 1px shade($white, 30%),
				-11px 22px 1px shade($white, 28%),
				-12px 24px 1px shade($white, 26%),
				-13px 26px 1px shade($white, 24%),
				-14px 28px 1px shade($white, 22%),
				-15px 30px 1px shade($white, 20%),
				-16px 32px 1px shade($white, 18%),
				-17px 34px 1px shade($white, 16%),
				-18px 36px 1px shade($white, 14%),
				-19px 38px 1px shade($white, 12%),
				-20px 40px 1px shade($white, 10%),
				-21px 42px 1px shade($white, 8%),
				-22px 44px 1px shade($white, 6%),
				-23px 46px 1px shade($white, 4%),
				-24px 48px 1px shade($white, 2%);
}

@mixin deep-white-shadow() {
	color: shade($white, 0.05);
	text-shadow: 1px -1px 0 $white,
				-1px 2px 1px shade($white, 24%),
				-2px 4px 1px shade($white, 23%),
				-3px 6px 1px shade($white, 22%),
				-4px 8px 1px shade($white, 21%),
				-5px 10px 1px shade($white, 20%),
				-6px 12px 1px shade($white, 19%),
				-7px 14px 1px shade($white, 18%),
				-8px 16px 1px shade($white, 17%),
				-9px 18px 1px shade($white, 16%),
				-10px 20px 1px shade($white, 15%),
				-11px 22px 1px shade($white, 14%),
				-12px 24px 1px shade($white, 13%),
				-13px 26px 1px shade($white, 12%),
				-14px 28px 1px shade($white, 11%),
				-15px 30px 1px shade($white, 10%),
				-16px 32px 1px shade($white, 9%),
				-17px 34px 1px shade($white, 8%),
				-18px 36px 1px shade($white, 7%),
				-19px 38px 1px shade($white, 6%),
				-20px 40px 1px shade($white, 5%),
				-21px 42px 1px shade($white, 4%),
				-22px 44px 1px shade($white, 3%),
				-23px 46px 1px shade($white, 2%),
				-24px 48px 1px shade($white, 1%);
}

@mixin condensed-shadow() {
	text-shadow: -15px 5px 20px $white--darkest;
	color: $white;
	letter-spacing: -0.05em;
}

@mixin retro-text() {
	position: relative;
	color: $white;
	text-shadow:
		-1px -1px 0 $black,
		1px -1px 0 $black,
		-1px 1px 0 $black,
		1px 1px 0 $black,

		1px 0px 0px $yellow,
		0px 1px 0px $yellow,
		2px 1px 0px $yellow,
		1px 2px 0px $yellow,
		3px 2px 0px $yellow,
		2px 3px 0px $yellow,
		4px 3px 0px $yellow,
		3px 4px 0px $yellow,
		5px 4px 0px $yellow,

		3px 5px 0px $black,
		6px 5px 0px $black,
		-1px 2px 0 $black,
		0 3px 0 $black,
		1px 4px 0 $black,
		2px 5px 0px $black,
		2px -1px 0 $black,
		3px 0 0 $black,
		4px 1px 0 $black,
		5px 2px 0px $black,
		6px 3px 0 $black,
		7px 4px 0 $black,
		10px 10px 4px $white--darkest;
	font-weight: 700;
	letter-spacing: 5px;
	-webkit-text-stroke: 1px $black;
			text-stroke: 1px $black;
}

/**
 * === TYPE STYLES ===
 */

@mixin type() {
	font-family: inherit;
	font-weight: normal;
	line-height: $base-line-height;
	widows: 3;
	orphans: 3;
	color: inherit;

	@include last(1) {
		margin-bottom: 0;
	}
}

@mixin title($underline: null) {
	font-size: $font-h1;
	letter-spacing: -1.5px;

	@include media("<screen480") {
		font-size: $font-h2;
		hyphens: auto;
		word-break: break-word;
	}

	@if $underline == "underlined" {
		@include underlined();
	}
}

@mixin subtitle($underline: null) {
	font-size: $font-h2;
	letter-spacing: -0.5px;

	@include media("<screen480") {
		hyphens: auto;
	}

	@if $underline == "underlined" {
		@include underlined();
	}
}

@mixin paragraph($underline: null) {
	font-size: $font-h3;
	@include media("<=screen320") {
		font-size: 1rem;
	}
	@if $underline == "underlined" {
		@include underlined();
	}
}

@mixin body-copy($underline: null) {
	@include type();
	margin: 0 0 math.div($base-line-height, 2);

	@if $underline == "underlined" {
		@include underlined();
	}
}

@mixin base-font-size() {
	// font-size: 1.181vw;
	font-size: clamp(100%, 1rem + 1vw, 1.33em);
	font-size: 1rem;
}

@mixin small-font-size() {
	font-size: clamp(75%, 1rem + 1vw, 1em);
	font-size: 0.875rem;
}

@mixin smaller-font-size() {
	font-size: clamp(75%, 1rem + 1vw, 1em);
	font-size: 0.875rem;
}

@mixin smallest-font-size() {
	font-size: clamp(62.5%, 1rem + 1vw, 0.75em);
	font-size: 0.75rem;
}

@mixin label() {
	font-family: $font-header;
	font-size: $font-h5;
	font-weight: 700;
	line-height: 1em;
	text-transform: uppercase;
	margin: 0;
}

@mixin caption() {
	margin: 0;
	// font-size: 1.15vw;
	font-size: 0.875em;
	font-family: $font-header;
	font-weight: 700;
	line-height: 1em;
	text-transform: uppercase;
	letter-spacing: 2px;
}

@mixin underlined() {
	position: relative;
	padding-bottom: calc(.5em + 10px);
	margin-bottom: .5em;

	&::after {
		content: "";
		position: absolute;
		left: 0;
		bottom: 0;
		width: 50px;
		height: 10px;
		transition: background-color $speed, width $speed;
		background-color: $yellow;

		@include media(">=screen600") {
			width: 100px;
		}
	}
}

@mixin drop-cap() {
	&:first-letter {
		margin: 0 0.25em 0 0;
		float: left;
		font-family: $font-secondary;
		font-size: 3.25em;
		// font-size: 3.375em;
		// font-size: 2em;
		font-size: 5.5em;
		line-height: 0.9em;
		color: $yellow;
	}
}

@mixin animateTitle() {

	.-word {
		position: relative;
		display: inline-block;

		// apply animation delays to child elements
		// that are created with javascript
		@for $i from 1 through 10 {
			&:nth-child(#{$i}) {
				.-block {
					animation-delay: #{100ms * $i};
				}
				.-word {
					animation-delay: #{100ms * $i};
				}
			}
		}
	}

	.-block {
		position: absolute;
		left: 0;
		bottom: 0;
		width: 100%;
		height: 0;
		background-color: $black--light;
		animation: blockIn forwards 1s cubic-bezier(0.22, 0.68, 0, 1.71);
	}

	.-text {
		display: inline-block;
		color: $black--light;
		animation: wordIn forwards $speed-slow linear;
	}
}

/**
 * === TEXTURE EFFECTS ===
 */

@mixin texture-grid() {
	background: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" width="3" height="3" viewBox="0 0 9 9" fill="#171409"><circle cx="2" cy="2" r="2" style="opacity:0.15" /></svg>') repeat;
}

@mixin image-overlay() {
	@supports (background-blend-mode: multiply) {
		z-index: 0;
		&::before {
			content: "";
			position: absolute;
			top: 0;
			left: 0;
			display: block;
			width: 100%;
			height: 100%;
			overflow: hidden;
			background: transparent url("/wp-content/themes/onemohrtime/assets/img/img-texture.png") repeat center center;
			background-blend-mode: multiply;
			z-index: 1;
		}
	}
}

@mixin mask-texture() {
	-webkit-mask-image: url("/wp-content/themes/onemohrtime/assets/img/rough-texture.png");
			mask-image: url("/wp-content/themes/onemohrtime/assets/img/rough-texture.png");
}

/**
 * === BUTTONS AND LINKS ===
 */

@mixin inline-block() {
	position: relative;
	color: inherit;
	line-height: $base-line-height;
	z-index: 1;

	@include media(">=screen1170") {
		// hover, focus
		@include hocus{
			color: inherit;

			&::before {
				left: -4px;
				right: -4px;
				bottom: 0.25em;
				width: calc(100% + 8px);
				height: 80%;
				transform: translateY(2px) scaleY(1.2);
				animation: none;
			}

			.c-media__svg {
				transform: translateX($small-spacing);
			}
		}
	}

	&::before {
		content: "";
		position: absolute;
		bottom: 0.25em;
		width: auto;
		height: 8px;
		transition: $speed;
		background-color: $yellow;
		animation: dancemonkey 2s infinite ease-in-out;
		// animation-delay: #{random(10)}00ms;
		z-index: -1;
	}

	.c-media__svg {
		position: relative;
		transition: $speed-slow cubic-bezier(.455,.03,.515,.955);
	}
}

@mixin block-link($border: null) {
	position: absolute;
	top: 0;
	left: 0;
	right: 0;
	bottom: 0;
	display: block;
	background: none;

	@if $border == "has-border" {
		top: 10px;
		left: 10px;
		right: 10px;
		bottom: 10px;
		border: 10px transparent solid;
		transition: border $speed;
		&:hover,
		&:focus {
			border-color: fade-out($yellow, 0.15);
		}
	} @else {
		// nothing, continue on
	}
}

@mixin underline-link() {
	border-bottom: 3px $black solid;
	font-weight: 700;
	padding-left: $small-spacing;
	padding-right: $small-spacing;
	padding-bottom: .25em;
}

@mixin btn-color($buttoncolor: $black, $hover: $yellow) {
	border: 3px $buttoncolor solid;
	color: $buttoncolor;

	&::after {
		background-color: $hover;
	}
}

@mixin btn-contact() {
	@include btn-color($white);
	@include caption();

	&:focus {
		@include btn-color($white);
	}

	@include media(">=screen600") {
		position: absolute;
		top: 50%;
		right: $base-spacing;
		transform: rotate(-90deg) translateY(-50%) !important;
		transform-origin: center top 0;
		z-index: 2;
	}

	@include media(">=screen960") {
		padding: 0.75em 1em;
	}

	@include media(">=screen1024") {
		transform: rotate(-90deg) translateY(-100%) !important;
	}

	@include media(">=screen1170") {
		&:hover {
			@include btn-color($white);
		}
	}

	@include media(">=screen1440") {
		transform: rotate(-90deg) translateY(-200%) !important;
	}
}
